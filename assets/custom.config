// custom.config
// usage: nextflow run epidiverse/wgbs [OPTIONS] -c /path/to/custom.config
//
// use this file to configure jobs on your own grid machine
// conda/docker/singularity is required for pipeline dependencies
//
// refer here to determine executor support
// https://www.nextflow.io/docs/latest/executor.html
//
// example with PBSPRO:
//

conda.cacheDir = "/path/to/shared/environments"
singularity.cacheDir = "/path/to/shared/containers"
singularity.enabled = false
docker.enabled = false



executor {

	$pbspro {
		jobName = { "${task.name}".replaceAll("\\s","") }
		submitRateLimit = '20 min'
		queueSize = 20
		pollInterval = '30 sec'
	}
}



process {

	executor = 'pbspro'

	// with conda
	module = ['Miniconda3']
	conda = "${baseDir}/env/environment.yml"

	// with docker/singularity
	container = "epidiverse/wgbs"



	// top-level configuration groups
	withLabel: "low" {
    	time = { 8.h * task.attempt }
    	memory = { 2.GB * task.attempt }
    	cpus = 2
	}

	withLabel: "tiny" {
		time = 2.h
		memory = 500.MB
		cpus = 1
	}

	withLabel: "finish" {
    	errorStrategy = { task.exitStatus in [140,141,143,137,104,134,139] ?
			(task.attempt > 3 ? 'finish' : 'retry') :
			sleep(Math.pow(2, task.attempt) * 1000 as long); task.attempt > 1 ? 'finish' : 'retry'}
        maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 1 }
	}

	withLabel: "ignore" {
    	errorStrategy = { task.exitStatus in [140,141,143,137,104,134,139] ?
			(task.attempt > 3 ? 'ignore' : 'retry') :
			sleep(Math.pow(2, task.attempt) * 1000 as long); task.attempt > 1 ? 'ignore' : 'retry'}
        maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 1 }
	}


	// configuration for building genome index for erne-bs5
	withName: "erne_bs5_indexing" {
	
		// label 'low'
    	//time = { 8.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = 2
	}


	// configuration for building genome index for segemehl
	withName: "segemehl_indexing" {
	
		// label 'low'
    	//time = { 8.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = 2
	}


	// configuration for trimming reads
	withName: "read_trimming" {

		// label 'low'
		cpus = { params.SE ? '1' : '2' }
	}


	// configuration for merging input + merge reads
	withName: "read_merging" {

		// label 'tiny'
		memory = { 250.MB * task.attempt }
		cpus = { params.SE ? '1' : '2' }
	}


	// configuration for fastqc
	withName: "fastqc" {

		// label 'tiny'
		cpus = { params.SE ? '1' : '2' }
	}

	// configuration for "erne-bs5" alignment
	withName: "erne_bs5" {

    	time = { 12.h * task.attempt }
    	memory = { 2.GB * task.attempt }
    	cpus = { 8 * task.attempt }
	}

	// configuration for "segemehl" alignment
	withName: "segemehl" {

    	time = { 1.d * task.attempt }
    	memory = { 8.GB + 8.GB * task.attempt }
    	cpus = { 8 * task.attempt }
	}


	// configuration for "erne-bs5" post-processing
	withName: "erne_bs5_processing" {
	
		time = { 16.h * task.attempt }
		memory = { 14.GB * task.attempt }
		cpus = { 4 * task.attempt }    
	}


	// configuration for "segemehl" post-processing
	withName: "segemehl_processing" {
	
		// label 'low'
    	//time = { 8.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = 2
	}


	// configuration for bam merging
	withName: "bam_merging" {
	
		// label 'low'
    	//time = { 8.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = 2
	}


	// configuration for lambda subsetting
	withName: "bam_subsetting" {

		// label 'low'
		time = { 10.h * task.attempt }
	}


	// configuration for calculating statistics
	withName: "bam_statistics" {

		// label 'low'
		time = { 10.h * task.attempt }
	}


	// configuration for bam file preparation
	withName: "bam_filtering" {
	
		// label 'low' 
    	//time = { 8.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = 2
	}


	// configuration for bam file preparation
	withName: "bam_processing" {
	
		// label 'low' 
    	//time = { 8.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = 2
	}


	// configuration for Picard MarkDuplicates
	withName: "Picard_MarkDuplicates" {

		// label 'low'
		time = { 10.h * task.attempt }
		memory = { 10.GB * task.attempt }
	}


	// configuration for MethylDackel
	withName: "MethylDackel" {

		// label 'low'
		time = { 1.h * task.attempt }
	}


	// configuration for linear regression (sample alignments + duplicates)
	withName: "linear_regression" {

		// label 'low'
		time = { 1.h * task.attempt }
	}


	// configuration for conversion rate estimation
	withName: "conversion_rate_estimation" {

		// label 'low'
		time = { 1.h * task.attempt }
	}
}